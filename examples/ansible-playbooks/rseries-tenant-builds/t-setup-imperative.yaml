---
################################################################################################
# CREATED and TESTED SUCCESSFULLY BY STEVEN MEISENZAHL 2/8/2023
#
# THERE IS NO SUPPORT FOR THIS SOLUTION, USE AT YOUR OWN RISK
# 
#
# REFERENCE PAGES FOR THE BELOW TASKS CAN BE FOUND BY USING THE FOLLOWING LINK
# https://clouddocs.f5.com/products/orchestration/ansible/devel/f5_bigip/modules_2_0/module_index.html
#
# THIS PLAYBOOK USES THE "hosts" FILE ONLY AND NO OTHER VARIABLE FILE
#
# EXAMPLE hosts FILE ENTRY BELOW
# 
#  [tenant1]
#    big-ip-lab1 hostname=big-ip-lab1.f5net def_admin=admin def_root=root ten1_ip=10.154.85.124 def_admin_pass=admin def_root_pass=default new_root_pass=<NEW PASSWORD> new_admin_pass=<NEW PASSWORD>	
#
#
# Usage: ansible-playbook -vvv t-setup-imperative.yaml 
#
# NOTE: THIS PLAYBOOK CAN BE BUILD TO USE AN ANOTHER EXTERNAL VARIABLE FILE FOR ITEMS THAT ARE DIRECTLY CALLED OUT BELOW FOR EXAMPLE DNS AND NTP SERVICES.
#
################################################################################################

- name: Initial Tenant Setup
  hosts: tenant1
  connection: local

  vars:
      provider:
          server: "{{ ten1_ip }}"
          server_port: 443
          user: "{{ def_admin }}"
          password: "{{ new_admin_pass }}"
          validate_certs: no

  tasks:
      - name: Configure the expired admin password
        uri:
            url: "https://{{ ten1_ip }}/mgmt/shared/authz/users/admin"
            method: PATCH
            body: '{"oldPassword":"{{ def_admin_pass }}","password":"{{ new_admin_pass }}"}'
            body_format: json
            validate_certs: no
            force_basic_auth: yes
            user: admin
            password: admin
            headers:
                Content-Type: "application/json"

      - name: Configure the root password
        bigip_user:
            full_name: root
            username_credential: root
            password_credential: "{{ new_root_pass }}"
            update_password: always
            provider: "{{ provider }}"
      
      - name: Wait 10 seconds for password changes to save before Disable GUI setup 
        ansible.builtin.wait_for:
          timeout: 10
        delegate_to: localhost

      - name: Disable the GUI setup utility
        bigip_sys_global:
          gui_setup: no
          state: present
          provider: "{{ provider }}"

      - name: Wait 10 seconds before provisioning
        ansible.builtin.wait_for:
          timeout: 10
        delegate_to: localhost

      - name: Provision LTM at "nominal" level - This task will take a few minutes to complete!
        bigip_provision:
          module: ltm
          level: nominal
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Provision AVR at "nominal" level - This task will take a few minutes to complete!
        bigip_provision:
          module: avr
          level: nominal
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Provision mgmt with large amount of memory - This task will take a few minutes to complete!
        bigip_provision:
          module: mgmt
          memory: large
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Wait 15 seconds for provisioning to finish
        ansible.builtin.wait_for:
          timeout: 15
        delegate_to: localhost

      - name: Set the DNS settings on the BIG-IP
        bigip_device_dns:
          name_servers:
            - 8.8.8.8
            - 4.4.4.4
          search:
            - localdomain
            - lab.local
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Set NTP server
        bigip_device_ntp:
          ntp_servers:
            - 162.159.200.1
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Set timezone
        bigip_device_ntp:
          timezone: America/New_York
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Set the banner for the SSHD service from a string
        bigip_device_sshd:
          banner: enabled
          banner_text: banner text goes here
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Set SSL cipher suite by string
        bigip_device_httpd:
          ssl_cipher_suite: ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:AES256-SHA256
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Set the hostname of the BIG-IP
        bigip_hostname:
          hostname: "{{hostname}}"
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Create HSL pool
        bigip_pool:
          state: present
          name: pool_hsl
          partition: Common
          lb_method: least-connections-member
          slow_ramp_time: 120
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Add pool multiple poolmembers to hsl pool
        bigip_pool_member:
          pool: pool_hsl
          aggregate:
            - host: 192.168.1.1
              partition: Common
              port: 80
              description: web server
              connection_limit: 100
              rate_limit: 50
              ratio: 2
            - host: 192.168.1.2
              partition: Common
              port: 80
              description: web server
              connection_limit: 100
              rate_limit: 50
              ratio: 2
            - host: 192.168.1.3
              partition: Common
              port: 80
              description: web server
              connection_limit: 100
              rate_limit: 50
              ratio: 2
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Create a high-speed logging destination
        bigip_log_destination:
          name: my-hsl-destination
          type: remote-high-speed-log
          pool: pool_hsl
          provider: "{{ provider }}"
        delegate_to: localhost

      - name: Create a log publisher for use in high speed logging
        bigip_log_publisher:
          name: HSL
          destinations: my-hsl-destination
          state: present
          provider: "{{ provider }}"
        delegate_to: localhost
